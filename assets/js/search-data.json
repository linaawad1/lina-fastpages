{
  
    
        "post0": {
            "title": "Quizoutline",
            "content": "My Quiz Outline . Ideas: . Make a cell phone layout to hold our quiz | Our lockscreen is a photo of Chris and Matt Sturniolo using the upload image feature and an open button We also included details like the time and date | . | Our homescreen included a pretty picture of a sunset from the internet | From there we created a button that we designed to look like an app on a phone | Our first app was our quiz with 3 questions about the Sturniolo Triplets, Lydia’s favorite drink, and my favorite ice cream flavor. | Then, when the user goes back to the homescreen they can clcik on the istagram app. | In the instagram app, it shows a picture of Lydia and I and a button called “load more” | If you click this button it takes you to Lydia’s picture. If it’s clicked it takes you to my pictures then to home. | The last app is a messaging app that shows a fake conversation between me and Lydia. | The last feature is a radio button that can take the user back to the lockscreen 11.That’s our quiz!!!! | Lydia and I’s App Lab Project . https://studio.code.org/projects/applab/7FyBTOeW5LTCta2Q1Z3ZlLsFXuzzRota5b7uXiTt1_I .",
            "url": "https://linaawad1.github.io/lina.github.io/quizoutline/",
            "relUrl": "/quizoutline/",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "My Fastpages",
            "content": "Blog . By:Lina&#39;s adventures in APCSP . toc: true | badges: true | comments: true | categories: [jupyter] | image: images/chart-preview.png | . msg = &quot;Lina&#39;s Jupyter Notebook&quot; print (msg) . Lina&#39;s Jupyter Notebook .",
            "url": "https://linaawad1.github.io/lina.github.io/jupyter/2022/09/08/Jupyter-notebook.html",
            "relUrl": "/jupyter/2022/09/08/Jupyter-notebook.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Themechange",
            "content": "Theme Change] . .",
            "url": "https://linaawad1.github.io/lina.github.io/2022/09/06/Themechange.html",
            "relUrl": "/2022/09/06/Themechange.html",
            "date": " • Sep 6, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "# variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;Lina Awad&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 15 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() . InfoDb = [] # InfoDB is a data structure with expected Keys and Values InfoDb.append({ &quot;FirstName&quot;: &quot;Lina&quot;, &quot;LastName&quot;: &quot;Awad&quot;, &quot;DOB&quot;: &quot;October 28&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;lina.eid28@gmail.com&quot;, &quot;Own_Cars&quot;: [&quot;Honda&quot;, &quot;Infinity&quot;, &quot;Tesla&quot;] }) # Print the data structure print(InfoDb) .",
            "url": "https://linaawad1.github.io/lina.github.io/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Lists, Dictionaries, Iteration",
            "content": "# variable of type string print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 18 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;Bash&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name John Doe &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 18 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;] &lt;class &#39;list&#39;&gt; length 4 - langs[3] Bash &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;Bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . List and Dictionary purpose . Our society is being built on information. List and Dictionaries are used to collect information. Mostly, when information is collected it is formed into patterns. As that pattern is established you will be able collect many instances of that pattern. . List is used to collect many instances of a pattern | Dictionary is used to define data patterns. | Iteration is often used to process through lists. | . To start exploring more deeply into List, Dictionary and Iteration this example will explore constructing a List of people and cars. . As we learned above, a List is a data type: class &#39;list&#39; | A &#39;list&#39; data type has the method &#39;.append(expression)&#39; that allows you to add to the list. A class usually has extra method to support working with its objects/instances. | In the example below, the expression is appended to the &#39;list&#39; is the data type: class &#39;dict&#39; | At the end, you see a fairly complicated data structure. This is a list of dictionaries, or a collection of many similar data patterns. The output looks similar to JavaScript Object Notation (JSON), Jekyll/GitHub pages yml files, FastPages Front Matter. As discussed we will see this key/value patter often, you will be required to understand this data structure and understand the parts. Just believe it is peasy ;) and it will become so. | . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) InfoDb.append({ &quot;FirstName&quot;: &quot;Lina&quot;, &quot;LastName&quot;: &quot;Awad&quot;, &quot;DOB&quot;: &quot;October 28&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;lina.eid28@gmail.com&quot;, &quot;Own_Cars&quot;: [&quot;Honda&quot;, &quot;Infinity&quot;, &quot;Tesla&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Lina&#39;, &#39;LastName&#39;: &#39;Awad&#39;, &#39;DOB&#39;: &#39;October 28&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;lina.eid28@gmail.com&#39;, &#39;Own_Cars&#39;: [&#39;Honda&#39;, &#39;Infinity&#39;, &#39;Tesla&#39;]}] . Formatted output of List/Dictionary - for loop . Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet, to applications, or preparing it to be stored into a database. It is a great way to exchange data between programs and programmers. Exchange of data between programs includes the data type the method/function and the format of the data type. These concepts are key to learning how to write functions, receive, and return data. This process is often referred to as an Application Programming Interface (API). . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process... . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. | Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. | Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. | . # print function: given a dictionary of InfoDb content def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Lina Awad Residence: San Diego Birth Day: October 28 Cars: . KeyError Traceback (most recent call last) /Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 7 in &lt;cell line: 18&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; for record in InfoDb: &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; print_data(record) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; for_loop() /Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 7 in for_loop() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; print(&#34;For loop output n&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; for record in InfoDb: &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; print_data(record) /Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 7 in print_data(d_rec) &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print(&#34; t&#34;, &#34;Birth Day:&#34;, d_rec[&#34;DOB&#34;]) &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; print(&#34; t&#34;, &#34;Cars: &#34;, end=&#34;&#34;) # end=&#34;&#34; make sure no return occurs -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; print(&#34;, &#34;.join(d_rec[&#34;Owns_Cars&#34;])) # join allows printing a string list with separator &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#W6sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; print() KeyError: &#39;Owns_Cars&#39; . Alternate methods for iteration - while loop . In coding, there are usually many ways to achieve the same result. Defined are functions illustrating using index to reference records in a list, these methods are called a &quot;while&quot; loop and &quot;recursion&quot;. . The while_loop() function contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() | . # while loop algorithm contains an initial n and an index incrementing statement (n += 1) def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner . Calling a function repeatedly - recursion . This final technique achieves looping by calling itself repeatedly. . recursive_loop(i) function is primed with the value 0 on its activation with &quot;recursive_loop(0)&quot; | the last statement indented inside the if statement &quot;recursive_loop(i + 1)&quot; activates another call to the recursive_loop(i) function, each time i is increasing | ultimately the &quot;if i &lt; len(InfoDb):&quot; will evaluate to false and the program ends | . # recursion algorithm loops incrementing on each call (n + 1) until exit condition is met def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output . NameError Traceback (most recent call last) /Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 11 in &lt;cell line: 12&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#X13sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; return &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#X13sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; print(&#34;Recursive loop output n&#34;) &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#X13sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; recursive_loop(0) /Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb Cell 11 in recursive_loop(i) &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#X13sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; if i &lt; len(InfoDb): &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#X13sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; record = InfoDb[i] -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#X13sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; print_data(record) &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#X13sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; recursive_loop(i + 1) &lt;a href=&#39;vscode-notebook-cell:/Users/linaalsheikh-eid/APCSP/_notebooks/2022-08-29-TP120-python_lists.ipynb#X13sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; return NameError: name &#39;print_data&#39; is not defined . FirstName = input(&quot;What is your first name?&quot;) Age= input(&quot;How old are you?&quot;) FavoriteDrink= input(&quot;What is your favorite drink?&quot;) BestSeason= input(&quot;What is the best season of the year?&quot;) .",
            "url": "https://linaawad1.github.io/lina.github.io/collegeboard/python_lists",
            "relUrl": "/collegeboard/python_lists",
            "date": " • Aug 29, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Lina [^1] is a new computer science student at del norte hoping to learn cool skills. . Hey! What’s up? “The sky,” said Lydia. I am Lina .",
          "url": "https://linaawad1.github.io/lina.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Notes",
          "content": "Lessons . Try to use your brain . Lists and Dictionary . Str- String Ex: print(“What is the variable name/key?”, “value?”, “type?”, “primitive or collection, why?”) name = “John Doe” print(“name”, name, type(name)) . print() . Int- Float Ex: print(“What is the variable name/key?”, “value?”, “type?”, “primitive or collection, why?”) score = 90.0 print(“score”, score, type(score)) . print() Note: zero after decimal is important lol .",
          "url": "https://linaawad1.github.io/lina.github.io/note/",
          "relUrl": "/note/",
          "date": ""
      }
      
  

  
  

  

  
  

  
      ,"page7": {
          "title": "To Do",
          "content": "Week Calc BC APEL AP Bio AP CSP Personal . 3 | Unit 2 HW 6 | Annotate poem, Read book | Study for quiz, SLO&#39;s | Review Ticket | Drink Water | .",
          "url": "https://linaawad1.github.io/lina.github.io/toc/",
          "relUrl": "/toc/",
          "date": ""
      }
      
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://linaawad1.github.io/lina.github.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}